{
package parser

import "github.com/arizonahanson/oryx/pkg/ast"
}

// root
AST ←  expr:Expr? EOF {
  return expr, nil
}

// all types
Any ←  Null / Boolean / Number / String / Array / Map / Symbol / SExpr

// null
Null ←  "null" {
  return ast.Null{}, nil
}

// boolean
Boolean ←  "true" {
  return ast.Boolean(true), nil
} / "false" {
  return ast.Boolean(false), nil
}

// real number (eg. -123.45e-67)
Number ←  '-'? digit+ ('.' digit+)? ('e'i ('+' / '-')? digit+)? {
	return ast.NewNumberFromString(string(c.text))
}

// quoted string
String ←  '"' runeChr* '"' {
  return ast.NewStringFromString(string(c.text))
} / '"' runeChr* !'"' {
	return ast.Null{}, errors.New("not terminated")
}
// no naked " or \ inside a String, supports \\, \/, \", \abfnrtv, \xff, \uffff, \Uffffffff
runeChr ←  [^"\\] / runeEsc
runeEsc ←  `\` (["\\/abfnrtv] /
           ('x' hexDigit hexDigit) /
           ('u' hexDigit hexDigit hexDigit hexDigit) /
           ('U' hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit))
hexDigit ← [0-9a-f]i

// array
Array ←  '[' list:Mat? ']' {
  if list == nil {
    return ast.Array{}, nil
  }
  return list, nil
} / '[' Mat? !']' {
  return ast.Null{}, errors.New("not terminated")
}
Mat ←  first:List? rest:(';' List?)* {
  mat := join(first, rest, 1)
  if len(slice(rest)) == 0 {
    if first == nil {
      return ast.Array{}, nil
    }
    return first, nil
  }
  return ast.Array(mat), nil
}
// list of one or more Any
List ←  list:(Seq / Unary) {
  return ast.Array(list.([]ast.Any)), nil
}
// sequence of two or more Any
Seq ←  _* first:Any rest:(_+ Any)+ _* {
  return join(first, rest, 1), nil
}

// map
Map ←  '{' _* first:(String _* ':' _* Any)? rest:(_+ String _* ':' _* Any)* _* '}' {
  return ast.Map(merge(first, rest, 0, 4)), nil
} / '{' _* (String _* ':' _* Any) (_+ String _* ':' _* Any)* _* !'}' {
  return ast.Null{}, errors.New("not terminated")
}

// symbol
Symbol ←  !(Null / Boolean) word ("!" / "?")? {
  return symbol(c)
}

// s-expression
SExpr ←  '(' expr:Expr? ')' {
  if expr == nil {
    return ast.Expr{}, nil
  }
  return expr, nil
} / '(' Expr? !')' {
  return ast.Null{}, errors.New("not terminated")
}
// infix or unary expression, or sequence of one Any
Expr ←  expr:(Seq / FnExpr) {
  return ast.Expr(expr.([]ast.Any)), nil
}
// fn
FnOp ←  "=>" {
  return symbol(c)
}
FnExpr ←  _* left:AsExpr right:(_* FnOp _* AsExpr)? _* {
  return swap(left, []interface{}{right}, 1, 3), nil
}
// assign
AsOp ←  ":=" {
  return symbol(c)
}
AsExpr ←  left:OrExpr right:(_* AsOp _* OrExpr)? {
  return swap(left, []interface{}{right}, 1, 3), nil
}
// or
OrOp ←  "||" {
  return symbol(c)
}
OrExpr ←  left:AndExpr right:(_* OrOp _* AndExpr)* {
  return swap(left, right, 1, 3), nil
}
// and
AndOp ←  "&&" {
  return symbol(c)
}
AndExpr ←  left:EqlExpr right:(_* AndOp _* EqlExpr)* {
  return swap(left, right, 1, 3), nil
}
// equality
EqlOp ←  ("==" / "!=") {
  return symbol(c)
}
EqlExpr ←  left:CmpExpr right:(_* EqlOp _* CmpExpr)? {
  return swap(left, []interface{}{right}, 1, 3), nil
}
// comparisons
CmpOp ←  ("<=" / "<" / ">=" / ">") {
  return symbol(c)
}
CmpExpr ←  left:AddExpr right:(_* CmpOp _* AddExpr)? {
  return swap(left, []interface{}{right}, 1, 3), nil
}
// add / subtract
AddOp ←  ("+" / "-") {
  return symbol(c)
}
AddExpr ←  left:MulExpr right:(_* AddOp _* MulExpr)* {
  return swap(left, right, 1, 3), nil
}
// multiply / divide
MulOp ←  ("*" / "/") {
  return symbol(c)
}
MulExpr ←  left:Unary right:(_* MulOp _* Unary)* {
  return swap(left, right, 1, 3), nil
}
// unary
UnaOp ←  "!" {
  return symbol(c)
}
Unary ←  uop:UnaOp? _* any:Any {
  if uop != nil {
    return []ast.Any{uop.(ast.Symbol), any.(ast.Any)}, nil
  }
  // no-operator
  return []ast.Any{any.(ast.Any)}, nil
}

// symbol component
word ←  letter (letter / digit)*
// unicode "letters" for symbols
letter ←  [\p{L}] / '_'
// numerals
digit ←  [0-9]

// UTF-8: whitespace and control chars/unused codes
_ "whitespace" ←  [\p{Z}] / [\p{C}] / ',' / Comment
// comments
Comment ←  SingleLineComment / MultiLineComment
SingleLineComment ← "//" (!EOL .)* EOL
MultiLineComment ←  "/*" (!"*/" .)* "*/"

// end of line
EOL ←  '\n' / EOF
// End of file
EOF ←  !.
